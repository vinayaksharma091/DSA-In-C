#include <stdio.h>
#include <stdlib.h>
#define MAX 100
int tree[MAX];

int findMin(int i){
    while(i<MAX && tree[2*i+1]!=-1){
        i=2*1+1;
    }
    return i;
}
int findMax(int i){
    while(i<MAX && tree[2*i+2]!=-1){
        i=2*1+2;
    }
    return i;
}
void insert(int value, int root)
{
    if (tree[root] == -1)
        tree[root] = value;
    else if (value < tree[root])
        insert(value, 2 * root + 1);
    else if (value > tree[root])
        insert(value, 2 * root + 2);
}

void preorder(int root)
{
    if (tree[root] != -1)
    {
        printf("%d ", tree[root]); // print root
        preorder(2 * root + 1);    // left
        preorder(2 * root + 2);    // right
    }
}
void inorder(int root)
{
    if (tree[root] != -1)
    {
        inorder(2 * root + 1);     // left
        printf("%d ", tree[root]); // print root
        inorder(2 * root + 2);     // right
    }
}
void postorder(int root)
{
    if (tree[root] != -1)
    {
        postorder(2 * root + 1);   // left
        postorder(2 * root + 2);   // right
        printf("%d ", tree[root]); // print root
    }
}
int search(int target, int i)
{
    if (i >= MAX || tree[i] == -1)
        return -1;
    else if (tree[i] == target)
    {
        return i;
    }

    else if (target < tree[i])
    {
        return search(target, 2 * i + 1);
    }
    else
    {
        return search(target, 2 * i + 2);
    }
}

void init()
{

    for (int i = 0; i < MAX; i++)
    {
        tree[i] = -1;
    }
}

void delete(int i, int value)
{
    i = (i, search(value, 0));
    if (i == -1)
        printf("Element Not FOund\n");
    else
    {
        int left = 2 * i + 1;
        int right = 2 * i + 2;
        if ((left >= MAX || tree[left] == -1) && (right >= MAX || tree[right] == -1))
        {
            tree[i] = -1;
        }
        else if (tree[left] == -1) // right child only
        {
            int min=findMin(right);
            tree[i]=tree[min];
            delete(min,tree[min]);
        }
        else if (tree[right] == -1) // left child only
        {
            int max=findMax(left);
            tree[i]=tree[max];
            delete(max,tree[max]);
        }
        else{     //having both children
            int min=findMin(right);
            tree[i]=tree[right];
            delete(min,tree[min]);
        }
    }
}

int main()
{
    init();
    int n, r, choice, ele;
    while (1)
    {
        printf("1.Insert\n2.Preorder\n3.Inorder\n4.Postorder\n5.Search\n6.Delete\n7.Exit\n");
        printf("Enter Choice : ");
        scanf("%d", &choice);
        switch (choice)
        {
        case 1:

            printf("Enter n : ");
            scanf("%d", &n);
            insert(n, 0);

            break;
        case 2:
            printf("\n preorder :  ");
            preorder(0);
            break;
        case 3:
            printf("\n inorder :  ");
            inorder(0);
            break;
        case 4:
            printf("\n postorder :  ");
            postorder(0);
            break;
        case 5:
            printf("Enter target value : ");
            scanf("%d", &ele);
            int res = search(ele, 0);
            if (res = -1)
                printf("Not Found\n");
            else
                printf("Found at index %d \n", res);
            break;
        case 6:
            printf("Enter element : ");
            scanf("%d", &ele);
            delete (ele, 0);
            break;
        case 7:
            exit(0);
        default:
            printf("Invalid CHoice !!!\n");
        }
        printf("\n");
    }
    return 0;
}
